# Ruler Configuration File
# See https://ai.intellectronica.net/ruler for documentation.

# To specify which agents are active by default when --agents is not used,
# uncomment and populate the following line. If omitted, all agents are active.
# default_agents = ["cursor", "claude"]

# Enable nested rule loading from nested .ruler directories
# When enabled, ruler will search for and process .ruler directories throughout the project hierarchy
# nested = false

# --- Agent Specific Configurations ---
# You can enable/disable agents and override their default output paths here.
# Use lowercase agent identifiers: amp, copilot, claude, codex, cursor, windsurf, cline, aider, kilocode

# [agents.copilot]
# enabled = true
# output_path = ".github/copilot-instructions.md"

# [agents.aider]
# enabled = true
# output_path_instructions = "AGENTS.md"
# output_path_config = ".aider.conf.yml"

# [agents.gemini-cli]
# enabled = true

# --- Global MCP Server Configuration ---
[mcp]
# Enable/disable MCP propagation globally (default: true)
enabled = true
# Global merge strategy: 'merge' or 'overwrite' (default: 'merge')
merge_strategy = "merge"

# --- MCP Servers ---
# Define Model Context Protocol servers here. Two examples:
# 1. A stdio server (local executable)
# 2. A remote server (HTTP-based)

[mcp_servers.shadcn]
command = "bunx"
args = ["shadcn@latest", "mcp"]

[mcp_servers.jpisnice_shadcn]
command = "bunx"
args = ["@jpisnice/shadcn-ui-mcp-server", "--framework", "react"]

# [mcp_servers.example_remote]
# url = "https://api.example.com/mcp"
# headers = { Authorization = "Bearer REPLACE_ME" }

# [mcp_servers.filesystem]
# command = "bunx"
# args = ["-y", "@modelcontextprotocol/server-filesystem", "/path/to/project"]

# [mcp_servers.git]
# command = "bunx"
# args = ["-y", "@modelcontextprotocol/server-git", "--repository", "."]

# [mcp_servers.remote_api]
# url = "https://api.example.com"

# [mcp_servers.remote_api.headers]
# Authorization = "Bearer your-token"

# Nested Rule Loading
# Ruler now supports nested rule loading with the --nested flag, enabling context-specific instructions for different parts of your project:

# project/
# ├── .ruler/           # Global project rules
# │   ├── AGENTS.md
# │   └── coding_style.md
# ├── src/
# │   └── .ruler/       # Component-specific rules
# │       └── api_guidelines.md
# ├── tests/
# │   └── .ruler/       # Test-specific rules
# │       └── testing_conventions.md
# └── docs/
#     └── .ruler/       # Documentation rules
#         └── writing_style.md
