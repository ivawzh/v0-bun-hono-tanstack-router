/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ChatRouteImport } from './routes/chat'
import { Route as AiRouteImport } from './routes/ai'
import { Route as AgentsRouteImport } from './routes/agents'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BoardsBoardIdRouteImport } from './routes/boards.$boardId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const AiRoute = AiRouteImport.update({
  id: '/ai',
  path: '/ai',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsRoute = AgentsRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BoardsBoardIdRoute = BoardsBoardIdRouteImport.update({
  id: '/boards/$boardId',
  path: '/boards/$boardId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/ai': typeof AiRoute
  '/chat': typeof ChatRoute
  '/login': typeof LoginRoute
  '/projects': typeof ProjectsRoute
  '/search': typeof SearchRoute
  '/boards/$boardId': typeof BoardsBoardIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/ai': typeof AiRoute
  '/chat': typeof ChatRoute
  '/login': typeof LoginRoute
  '/projects': typeof ProjectsRoute
  '/search': typeof SearchRoute
  '/boards/$boardId': typeof BoardsBoardIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/ai': typeof AiRoute
  '/chat': typeof ChatRoute
  '/login': typeof LoginRoute
  '/projects': typeof ProjectsRoute
  '/search': typeof SearchRoute
  '/boards/$boardId': typeof BoardsBoardIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents'
    | '/ai'
    | '/chat'
    | '/login'
    | '/projects'
    | '/search'
    | '/boards/$boardId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/agents'
    | '/ai'
    | '/chat'
    | '/login'
    | '/projects'
    | '/search'
    | '/boards/$boardId'
  id:
    | '__root__'
    | '/'
    | '/agents'
    | '/ai'
    | '/chat'
    | '/login'
    | '/projects'
    | '/search'
    | '/boards/$boardId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRoute: typeof AgentsRoute
  AiRoute: typeof AiRoute
  ChatRoute: typeof ChatRoute
  LoginRoute: typeof LoginRoute
  ProjectsRoute: typeof ProjectsRoute
  SearchRoute: typeof SearchRoute
  BoardsBoardIdRoute: typeof BoardsBoardIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai': {
      id: '/ai'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/boards/$boardId': {
      id: '/boards/$boardId'
      path: '/boards/$boardId'
      fullPath: '/boards/$boardId'
      preLoaderRoute: typeof BoardsBoardIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRoute: AgentsRoute,
  AiRoute: AiRoute,
  ChatRoute: ChatRoute,
  LoginRoute: LoginRoute,
  ProjectsRoute: ProjectsRoute,
  SearchRoute: SearchRoute,
  BoardsBoardIdRoute: BoardsBoardIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
